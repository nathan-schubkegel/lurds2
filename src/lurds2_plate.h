/*
This is free and unencumbered software released into the public domain under The Unlicense.
You have complete freedom to do anything you want with the software, for any purpose.
Please refer to <http://unlicense.org/>
*/

#ifndef LURDS2_PLATE
#define LURDS2_PLATE

#include "lurds2_bmp.h"

typedef enum PlateFileId {
  PlateFileId_A2B_ARCH,
  PlateFileId_A2B_CROS,
  PlateFileId_A2B_KNIG,
  PlateFileId_A2B_MACE,
  PlateFileId_A2B_PEAS,
  PlateFileId_A2B_PIKE,
  PlateFileId_A2B_PSNT,
  PlateFileId_A2B_SWOR,
  PlateFileId_A2G_ARCH,
  PlateFileId_A2G_CROS,
  PlateFileId_A2G_KNIG,
  PlateFileId_A2G_MACE,
  PlateFileId_A2G_PIKE,
  PlateFileId_A2G_PSNT,
  PlateFileId_A2G_SWOR,
  PlateFileId_A2K_ARCH,
  PlateFileId_A2K_CROS,
  PlateFileId_A2K_KNIG,
  PlateFileId_A2K_MACE,
  PlateFileId_A2K_PIKE,
  PlateFileId_A2K_PSNT,
  PlateFileId_A2K_SWOR,
  PlateFileId_A2P_ARCH,
  PlateFileId_A2P_CROS,
  PlateFileId_A2P_KNIG,
  PlateFileId_A2P_MACE,
  PlateFileId_A2P_PIKE,
  PlateFileId_A2P_PSNT,
  PlateFileId_A2P_SWOR,
  PlateFileId_A2R_ARCH,
  PlateFileId_A2R_CROS,
  PlateFileId_A2R_KNIG,
  PlateFileId_A2R_MACE,
  PlateFileId_A2R_PEAS,
  PlateFileId_A2R_PIKE,
  PlateFileId_A2R_PSNT,
  PlateFileId_A2R_SWOR,
  PlateFileId_A2W_ARCH,
  PlateFileId_A2W_CROS,
  PlateFileId_A2W_KNIG,
  PlateFileId_A2W_MACE,
  PlateFileId_A2W_PIKE,
  PlateFileId_A2W_PSNT,
  PlateFileId_A2W_SWOR,
  PlateFileId_A2Y_ARCH,
  PlateFileId_A2Y_CROS,
  PlateFileId_A2Y_KNIG,
  PlateFileId_A2Y_MACE,
  PlateFileId_A2Y_PIKE,
  PlateFileId_A2Y_PSNT,
  PlateFileId_A2Y_SWOR,
  PlateFileId_A2_HORSE,
  PlateFileId_A2_MISS,
  PlateFileId_A3B_ARCH,
  PlateFileId_A3B_CROS,
  PlateFileId_A3B_KNIG,
  PlateFileId_A3B_MACE,
  PlateFileId_A3B_PIKE,
  PlateFileId_A3B_PSNT,
  PlateFileId_A3B_SWOR,
  PlateFileId_A3K_ARCH,
  PlateFileId_A3K_CROS,
  PlateFileId_A3K_KNIG,
  PlateFileId_A3K_MACE,
  PlateFileId_A3K_PIKE,
  PlateFileId_A3K_PSNT,
  PlateFileId_A3K_SWOR,
  PlateFileId_A3P_ARCH,
  PlateFileId_A3P_CROS,
  PlateFileId_A3P_KNIG,
  PlateFileId_A3P_MACE,
  PlateFileId_A3P_PIKE,
  PlateFileId_A3P_PSNT,
  PlateFileId_A3P_SWOR,
  PlateFileId_A3R_ARCH,
  PlateFileId_A3R_CROS,
  PlateFileId_A3R_KNIG,
  PlateFileId_A3R_MACE,
  PlateFileId_A3R_PIKE,
  PlateFileId_A3R_PSNT,
  PlateFileId_A3R_SWOR,
  PlateFileId_A3W_ARCH,
  PlateFileId_A3W_CROS,
  PlateFileId_A3W_KNIG,
  PlateFileId_A3W_MACE,
  PlateFileId_A3W_PIKE,
  PlateFileId_A3W_PSNT,
  PlateFileId_A3W_SWOR,
  PlateFileId_A3Y_ARCH,
  PlateFileId_A3Y_CROS,
  PlateFileId_A3Y_KNIG,
  PlateFileId_A3Y_MACE,
  PlateFileId_A3Y_PIKE,
  PlateFileId_A3Y_PSNT,
  PlateFileId_A3Y_SWOR,
  PlateFileId_A3_HORSE,
  PlateFileId_ARMITEMS,
  PlateFileId_ARMOURY,
  PlateFileId_ARMTORCH,
  PlateFileId_ARM_BOW,
  PlateFileId_ARM_CROS,
  PlateFileId_ARM_IT_B,
  PlateFileId_ARM_IT_K,
  PlateFileId_ARM_IT_P,
  PlateFileId_ARM_IT_R,
  PlateFileId_ARM_IT_Y,
  PlateFileId_ARM_MACE,
  PlateFileId_ARM_MAIL,
  PlateFileId_ARM_PIKE,
  PlateFileId_ARM_SWOR,
  PlateFileId_BACKGRND,
  PlateFileId_BASE01,
  PlateFileId_BASE1A,
  PlateFileId_BASE1B,
  PlateFileId_BASE1C,
  PlateFileId_BASE1D,
  PlateFileId_BATFIELD,
  PlateFileId_CASPICS,
  PlateFileId_CASTLE1A,
  PlateFileId_CASTLE1B,
  PlateFileId_CASTLE1C,
  PlateFileId_CASTLE1D,
  PlateFileId_CAS_BACK,
  PlateFileId_CAS_BITS,
  PlateFileId_CATARM1,
  PlateFileId_CATARM2,
  PlateFileId_CROSSBOW,
  PlateFileId_CUSTOM,
  PlateFileId_ENGINE,
  PlateFileId_FACES,
  PlateFileId_FLAGS,
  PlateFileId_FLAGS1A_BASE,
  PlateFileId_FLAGS1A_SPRITE,
  PlateFileId_FLAGS1B,
  PlateFileId_FLAGS1C,
  PlateFileId_FLAGS1D,
  PlateFileId_FLAGS2A,
  PlateFileId_FNTL2_14,
  PlateFileId_FNTL2_22,
  PlateFileId_FNTL2_9,
  PlateFileId_FNT_8,
  PlateFileId_FONT3C2,
  PlateFileId_FONT_10,
  PlateFileId_FONT_C2,
  PlateFileId_GATEWAY,
  PlateFileId_GRAPHS,
  PlateFileId_GRTNOBLE,
  PlateFileId_HEARTH,
  PlateFileId_ICONTRAD,
  PlateFileId_ICONVILL,
  PlateFileId_ICON_TMP,
  PlateFileId_LORDS2,
  PlateFileId_MAP01,
  PlateFileId_MAP02,
  PlateFileId_MAP03,
  PlateFileId_MAP04,
  PlateFileId_MAP05,
  PlateFileId_MAP06,
  PlateFileId_MAP11,
  PlateFileId_MAP12,
  PlateFileId_MAP13,
  PlateFileId_MAP14,
  PlateFileId_MAP15,
  PlateFileId_MERCHANT,
  PlateFileId_MISC_BAT,
  PlateFileId_MISC_CTY,
  PlateFileId_MISC_SEL,
  PlateFileId_MISC_SKE,
  PlateFileId_MOUSE,
  PlateFileId_MTNS1A,
  PlateFileId_MTNS1B,
  PlateFileId_MTNS1C,
  PlateFileId_MTNS1D,
  PlateFileId_PANELS,
  PlateFileId_PANELS2,
  PlateFileId_PEASANT,
  PlateFileId_ROADS1A,
  PlateFileId_ROADS1B,
  PlateFileId_ROADS1C,
  PlateFileId_ROADS1D,
  PlateFileId_SCORE1,
  PlateFileId_SCORE2,
  PlateFileId_SGEPLANS,
  PlateFileId_SKIRCUST,
  PlateFileId_SKIRMISH,
  PlateFileId_SMITHY,
  PlateFileId_SPRITE1A,
  PlateFileId_SPRITE1B,
  PlateFileId_SPRITE2A,
  PlateFileId_SPRITE2B,
  PlateFileId_START,
  PlateFileId_STNFIELD,
  PlateFileId_SYSTEM,
  PlateFileId_SYSTEM2,
  PlateFileId_T32_BAT,
  PlateFileId_T32_BAT1,
  PlateFileId_T32_STN1,
  PlateFileId_T32_STN2,
  PlateFileId_T32_STNA,
  PlateFileId_T32_WOD1,
  PlateFileId_T32_WOD2,
  PlateFileId_TOWN1A,
  PlateFileId_TOWN1B,
  PlateFileId_TOWN1C,
  PlateFileId_TOWN1D,
  PlateFileId_TREASURY,
  PlateFileId_TROOP1,
  PlateFileId_TRP_AR_B,
  PlateFileId_TRP_AR_K,
  PlateFileId_TRP_AR_P,
  PlateFileId_TRP_AR_R,
  PlateFileId_TRP_AR_Y,
  PlateFileId_TRP_KN_B,
  PlateFileId_TRP_KN_K,
  PlateFileId_TRP_KN_P,
  PlateFileId_TRP_KN_R,
  PlateFileId_TRP_KN_Y,
  PlateFileId_TRP_MA_B,
  PlateFileId_TRP_MA_K,
  PlateFileId_TRP_MA_P,
  PlateFileId_TRP_MA_R,
  PlateFileId_TRP_MA_Y,
  PlateFileId_TRP_PI_B,
  PlateFileId_TRP_PI_K,
  PlateFileId_TRP_PI_P,
  PlateFileId_TRP_PI_R,
  PlateFileId_TRP_PI_Y,
  PlateFileId_TRP_SW_B,
  PlateFileId_TRP_SW_K,
  PlateFileId_TRP_SW_P,
  PlateFileId_TRP_SW_R,
  PlateFileId_TRP_SW_Y,
  PlateFileId_TRP_XB_B,
  PlateFileId_TRP_XB_K,
  PlateFileId_TRP_XB_P,
  PlateFileId_TRP_XB_R,
  PlateFileId_TRP_XB_Y,
  PlateFileId_VILL,
  PlateFileId_VILLAGE,
  PlateFileId_VILLAGE3,
  PlateFileId_VILLAGE4,
  PlateFileId_VILLANI1,
  PlateFileId_VILLANI2,
  PlateFileId_VILLBORD,
  PlateFileId_VILLTOPS,
  
  PlateFileId_END, // not a real ID; used internally to validate IDs
} PlateFileId;

typedef enum PaletteFileId {
  PaletteFileId_ARMITEMS,
  PaletteFileId_ARMOURY,
  PaletteFileId_BACKGRND,
  PaletteFileId_BASE01,
  PaletteFileId_BASE1A,
  PaletteFileId_CAS_BACK,
  PaletteFileId_CASTLE1,
  PaletteFileId_CUSTOM,
  PaletteFileId_DEMO,
  PaletteFileId_DEMO1,
  PaletteFileId_DEMO2,
  PaletteFileId_GATEWAY,
  PaletteFileId_GRTNOBLE,
  PaletteFileId_LORDS2,
  PaletteFileId_MERCHANT,
  PaletteFileId_MISC_SEL,
  PaletteFileId_SCORE1,
  PaletteFileId_SCORE2,
  PaletteFileId_SKIRCUST,
  PaletteFileId_SKIRMISH,
  PaletteFileId_SPRITE01,
  PaletteFileId_SPRITE1A,
  PaletteFileId_START,
  PaletteFileId_T32_BAT1,
  PaletteFileId_T32_STN1,
  PaletteFileId_TITLE,
  PaletteFileId_TREASURY,

  PaletteFileId_END, // not a real ID; used internally to validate IDs
  PaletteFileId_NONE, // not a real ID; used externally to indicate the default palette for a Plate file should be used
} PaletteFileId;

const char* PaletteFile_GetName(PaletteFileId id);
const wchar_t* PaletteFile_GetName_w(PaletteFileId id);

const char* PlateFile_GetName(PlateFileId id);
const wchar_t* PlateFile_GetName_w(PlateFileId id);

// A Plate (*.pl8) file is the format Lords of the Realm 2 uses to hold sprint and tile graphics
// This returns a bitmap for every tile in the plate file, with a trailing null pointer
Bmp* Plate_LoadFromFile(PlateFileId id);
Bmp* Plate_LoadFromFileWithCustomPalette(PlateFileId id, PaletteFileId customPalette);
void Plate_Release(Bmp* bitmaps);

#endif